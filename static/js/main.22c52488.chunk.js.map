{"version":3,"sources":["components/Switch/index.js","components/PureSvgNodeElement.js","App.js","index.js"],"names":["Input","Component","render","variable","name","onChange","checked","this","props","React","createElement","className","Object","assign","type","id","htmlFor","textLayout","vertical","title","textAnchor","x","attributes","attribute","dy","horizontal","y","PureSvgNodeElement","_ref","nodeDatum","orientation","toggleNode","onNodeClick","Fragment","r","onClick","entries","map","_ref2","i","labelKey","labelValue","key","concat","arg","customNodeFnMapping","svg","description","fn","rd3tProps","appState","countNodes","count","arguments","length","undefined","n","children","reduce","sum","child","App","constructor","super","handleCustomNodeFnChange","evt","customNodeKey","target","value","setState","renderCustomNodeElement","toggleCollapseNeighborNodes","prevState","shouldCollapseNeighborNodes","findNodeWithId","parent","ret","addChildNode","parentId","callback","data","clone","state","push","totalNodeCount","removeChildNode","childId","arrayRemove","filter","geeks","handleMessage","async","unlock","mutex","lock","console","log","event","message","JSON","parse","method","node","waitForContinue","dimensions","centeringTransitionDuration","collapsible","initialDepth","depthFactor","zoomable","draggable","scaleExtent","min","max","separation","siblings","nonSiblings","nodeSize","enableLegacyTransitions","transitionDuration","styles","wsURL","socket","tooltipAction","tooltipState","closeToolTip","Mutex","setTreeData","bind","setLargeTree","setOrientation","setPathFunc","handleChange","handleFloatChange","toggleCollapsible","toggleZoomable","toggleDraggable","toggleCenterNodes","setScaleExtent","setSeparation","setNodeSize","Array","isArray","pathFunc","parsedIntValue","parseInt","isNaN","parsedFloatValue","parseFloat","treeContainer","width","height","getBoundingClientRect","componentDidMount","translateX","translateY","_this","defaultValue","io","transports","on","error","disabled","emit","Switch","zoom","ref","tc","Tree","hasInteractiveNodes","rootNodeClassName","branchNodeClassName","leafNodeClassName","translate","onNodeMouseOver","tooltip","action","onNodeMouseOut","createRoot","document","getElementById"],"mappings":"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","file":"static/js/main.22c52488.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { Component } from 'react';\nimport './styles.css';\n\nclass Input extends Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    checked: PropTypes.bool.isRequired,\n    variable: PropTypes.object\n  };\n\n  render() {\n    const { variable, name, onChange, checked } = this.props;\n    return (\n      <div className='onoffswitch'>\n        <input type='checkbox' className='onoffswitch-checkbox' id={name} name={name}\n          onChange={onChange} checked={checked} {...variable} />\n        <label className='onoffswitch-label' htmlFor={name}>\n          <span className='onoffswitch-inner' />\n          <span className='onoffswitch-switch' />\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default Input;","import React from 'react';\n\nconst textLayout = {\n  vertical: {\n    title: {\n      textAnchor: 'start',\n      x: 40,\n    },\n    attributes: {},\n    attribute: {\n      x: 40,\n      dy: '1.2em',\n    },\n  },\n  horizontal: {\n    title: {\n      textAnchor: 'start',\n      y: 40,\n    },\n    attributes: {\n      x: 0,\n      y: 40,\n    },\n    attribute: {\n      x: 0,\n      dy: '1.2em',\n    },\n  },\n};\n\nconst PureSvgNodeElement = ({ nodeDatum, orientation, toggleNode, onNodeClick }) => {\n  return (\n    <>\n      <circle r={20} onClick={toggleNode}></circle>\n      <g className=\"rd3t-label\">\n        <text\n          className=\"rd3t-label__title\"\n          {...textLayout[orientation].title}\n          onClick={onNodeClick}\n        >\n          {nodeDatum.name}\n        </text>\n        <text className=\"rd3t-label__attributes\" {...textLayout[orientation].attributes}>\n          {nodeDatum.attributes &&\n            Object.entries(nodeDatum.attributes).map(([labelKey, labelValue], i) => (\n              <tspan key={`${labelKey}-${i}`} {...textLayout[orientation].attribute}>\n                {labelKey}: {labelValue}\n              </tspan>\n            ))}\n        </text>\n      </g>\n    </>\n  );\n};\n\nexport default PureSvgNodeElement;\n","import React, { Component } from 'react';\nimport { io } from 'socket.io-client';\nimport Mutex from \"await-mutex\";\nimport clone from 'clone';\nimport Tree from 'react-d3-tree';\nimport Switch from './components/Switch';\nimport PureSvgNodeElement from './components/PureSvgNodeElement';\nimport './App.css';\n\nconst arg = {};\n\n\nconst customNodeFnMapping = {\n  svg: {\n    description: 'Default - Pure SVG node & label (IE11 compatible)',\n    fn: (rd3tProps, appState) => (\n      <PureSvgNodeElement\n        nodeDatum={rd3tProps.nodeDatum}\n        toggleNode={rd3tProps.toggleNode}\n        orientation={appState.orientation}\n      />\n    ),\n  }\n};\n\nconst countNodes = (count = 0, n) => {\n  // Count the current node\n  count += 1;\n\n  // Base case: reached a leaf node.\n  if (!n.children) {\n    return count;\n  }\n\n  // Keep traversing children while updating `count` until we reach the base case.\n  return n.children.reduce((sum, child) => countNodes(sum, child), count);\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      data: arg,\n      totalNodeCount: countNodes(0, arg),\n      orientation: 'vertical',\n      dimensions: undefined,\n      centeringTransitionDuration: 800,\n      collapsible: false,\n      shouldCollapseNeighborNodes: false,\n      initialDepth: undefined,\n      depthFactor: 100,\n      zoomable: true,\n      draggable: true,\n      scaleExtent: { min: 0.01, max: 1 },\n      separation: { siblings: 1, nonSiblings: 1.25 },\n      nodeSize: { x: 200, y: 200 },\n      enableLegacyTransitions: false,\n      transitionDuration: 500,\n      renderCustomNodeElement: customNodeFnMapping['svg'].fn,\n      styles: {},\n      wsURL: \"http://localhost:8080\",\n      socket: undefined,\n      waitForContinue: false,\n      tooltipAction: \"\",\n      tooltipState: \"\",\n      closeToolTip: true,\n      mutex: new Mutex()\n    };\n\n    this.setTreeData = this.setTreeData.bind(this);\n    this.setLargeTree = this.setLargeTree.bind(this);\n    this.setOrientation = this.setOrientation.bind(this);\n    this.setPathFunc = this.setPathFunc.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFloatChange = this.handleFloatChange.bind(this);\n    this.toggleCollapsible = this.toggleCollapsible.bind(this);\n    this.toggleZoomable = this.toggleZoomable.bind(this);\n    this.toggleDraggable = this.toggleDraggable.bind(this);\n    this.toggleCenterNodes = this.toggleCenterNodes.bind(this);\n    this.setScaleExtent = this.setScaleExtent.bind(this);\n    this.setSeparation = this.setSeparation.bind(this);\n    this.setNodeSize = this.setNodeSize.bind(this);\n  }\n\n  setTreeData(data) {\n    this.setState({\n      data,\n      totalNodeCount: countNodes(0, Array.isArray(data) ? data[0] : data),\n    });\n  }\n\n  setLargeTree(data) {\n    this.setState({\n      data,\n      transitionDuration: 0,\n    });\n  }\n\n  setOrientation(orientation) {\n    this.setState({ orientation });\n  }\n\n  setPathFunc(pathFunc) {\n    this.setState({ pathFunc });\n  }\n\n  handleChange(evt) {\n    const target = evt.target;\n    const parsedIntValue = parseInt(target.value, 10);\n    if (target.value === '') {\n      this.setState({\n        [target.name]: undefined,\n      });\n    } else if (!isNaN(parsedIntValue)) {\n      this.setState({\n        [target.name]: parsedIntValue,\n      });\n    }\n  }\n\n  handleFloatChange(evt) {\n    const target = evt.target;\n    const parsedFloatValue = parseFloat(target.value);\n    if (target.value === '') {\n      this.setState({\n        [target.name]: undefined,\n      });\n    } else if (!isNaN(parsedFloatValue)) {\n      this.setState({\n        [target.name]: parsedFloatValue,\n      });\n    }\n  }\n\n  handleCustomNodeFnChange = evt => {\n    const customNodeKey = evt.target.value;\n\n    this.setState({ renderCustomNodeElement: customNodeFnMapping[customNodeKey].fn });\n  };\n\n  toggleCollapsible() {\n    this.setState(prevState => ({ collapsible: !prevState.collapsible }));\n  }\n\n  toggleCollapseNeighborNodes = () => {\n    this.setState(prevState => ({\n      shouldCollapseNeighborNodes: !prevState.shouldCollapseNeighborNodes,\n    }));\n  };\n\n  toggleZoomable() {\n    this.setState(prevState => ({ zoomable: !prevState.zoomable }));\n  }\n\n  toggleDraggable() {\n    this.setState(prevState => ({ draggable: !prevState.draggable }));\n  }\n\n  toggleCenterNodes() {\n    if (this.state.dimensions !== undefined) {\n      this.setState({\n        dimensions: undefined,\n      });\n    } else {\n      if (this.treeContainer) {\n        const { width, height } = this.treeContainer.getBoundingClientRect();\n        this.setState({\n          dimensions: {\n            width,\n            height,\n          },\n        });\n      }\n    }\n  }\n\n  setScaleExtent(scaleExtent) {\n    this.setState({ scaleExtent });\n  }\n\n  setSeparation(separation) {\n    if (!isNaN(separation.siblings) && !isNaN(separation.nonSiblings)) {\n      this.setState({ separation });\n    }\n  }\n\n  setNodeSize(nodeSize) {\n    if (!isNaN(nodeSize.x) && !isNaN(nodeSize.y)) {\n      this.setState({ nodeSize });\n    }\n  }\n\n  findNodeWithId = (id, parent) => {\n    if(parent.id === id) return parent;\n    const children = parent.children ? parent.children : [];\n    for(var i = 0; i < children.length; i++) {\n      const ret = this.findNodeWithId(id, children[i]);\n      if(ret) return ret;\n    }\n    return undefined;\n  }\n\n  addChildNode = (parentId, child, callback) => {\n    const data = clone(this.state.data);\n\n    const parent = this.findNodeWithId(parentId, data);\n\n    parent.children = parent.children ? parent.children : [];\n    const target = parent.children;\n    target.push(child);\n    this.setState({\n      data: data,\n      totalNodeCount: countNodes(0, data)\n    }, callback);\n  };\n\n  removeChildNode = (parentId, childId, callback) => {\n    const data = clone(this.state.data);\n    const parent = this.findNodeWithId(parentId, data);\n    const child = this.findNodeWithId(childId, data);\n\n    const target = parent.children ? parent.children : [];\n\n    const arrayRemove = (arr, value) => {\n      return arr.filter(function (geeks) {\n          return geeks !== value;\n      });\n    };\n\n    parent.children = arrayRemove(target, child);\n    this.setState({\n      data: data,\n      totalNodeCount: countNodes(0, data)\n    }, callback);\n  };\n\n  handleMessage = async (event) => {\n    let unlock = await this.state.mutex.lock();\n    console.log(\"Message from server: \", event);\n    const message = JSON.parse(event);\n    if(message.method === \"add\") {\n      const parentId = message.parent;\n      const child = message.child;\n      this.addChildNode(parentId, child, unlock);\n    }\n    else if(message.method === \"delete\") {\n      const parentId = message.parent;\n      const childId = message.child;\n      this.removeChildNode(parentId, childId, unlock);\n    } \n    else if(message.method === \"create\") {\n      this.setState({\n        data: message.node,\n        totalNodeCount: countNodes(0, message.node)\n      }, unlock);\n    } \n    else if (message.method === \"wait\") {\n      this.setState({waitForContinue: true}, unlock);\n    } else {\n      unlock();\n    }\n  }\n\n  componentDidMount() {\n    const dimensions = this.treeContainer.getBoundingClientRect();\n    this.setState({\n      translateX: dimensions.width / 2,\n      translateY: 100,\n    });\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"demo-container\">\n          <div className=\"column-left\">\n            <div className=\"controls-container\">\n              <div className=\"prop-container\">\n                <h2 className=\"title\">Theta ARG Debugger</h2>\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Setup</h4>\n                <label className=\"prop\" htmlFor=\"wsURL\">\n                  WS URL\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"wsURL\"\n                  defaultValue={this.state.wsURL}\n                  onChange={(evt) => this.setState({wsURL: evt.target.value})}\n                />\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => {\n                    const socket = io(this.state.wsURL, {transports: ['websocket']});\n                    socket.on(\"connect\", () => {\n                      console.log(\"Connection established \");\n                      this.setState({socket: socket})\n                    });\n                    socket.on(\"error\", (error) => {\n                      console.log(error);\n                    });\n                    socket.io.on(\"disconnect\", () => {\n                      console.log(\"Connection closed \");\n                      this.setState({socket: undefined})\n                    });\n                    socket.on(\"message\", event => this.handleMessage(event));\n                  }}\n                >\n                  {'Connect'}\n                </button>\n                <button\n                  type=\"button\"\n                  disabled={this.state.socket === undefined || !this.state.waitForContinue}\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => {\n                    this.setState({waitForContinue: false});\n                    this.state.socket.emit('continue', 'continue');\n                  }}\n                >\n                  {'Continue'}\n                </button>\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Orientation</h4>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setOrientation('horizontal')}\n                >\n                  {'Horizontal'}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setOrientation('vertical')}\n                >\n                  {'Vertical'}\n                </button>\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Path Function</h4>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setPathFunc('diagonal')}\n                >\n                  {'Diagonal'}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setPathFunc('elbow')}\n                >\n                  {'Elbow'}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setPathFunc('straight')}\n                >\n                  {'Straight'}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-controls btn-block\"\n                  onClick={() => this.setPathFunc('step')}\n                >\n                  {'Step'}\n                </button>\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Collapsible</h4>\n                <Switch\n                  name=\"collapsibleBtn\"\n                  checked={this.state.collapsible}\n                  onChange={this.toggleCollapsible}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Zoomable</h4>\n                <Switch\n                  name=\"zoomableBtn\"\n                  checked={this.state.zoomable}\n                  onChange={this.toggleZoomable}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Draggable</h4>\n                <Switch\n                  name=\"draggableBtn\"\n                  checked={this.state.draggable}\n                  onChange={this.toggleDraggable}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">\n                  Center Nodes on Click (via <code>dimensions</code> prop)\n                </h4>\n                <Switch\n                  name=\"centerNodesBtn\"\n                  checked={this.state.dimensions !== undefined}\n                  onChange={this.toggleCenterNodes}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <h4 className=\"prop\">Collapse neighbor nodes</h4>\n                <Switch\n                  name=\"collapseNeighborsBtn\"\n                  checked={this.state.shouldCollapseNeighborNodes}\n                  onChange={this.toggleCollapseNeighborNodes}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <label className=\"prop\" htmlFor=\"depthFactor\">\n                  Depth Factor (level separation, px)\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"depthFactor\"\n                  type=\"number\"\n                  defaultValue={this.state.depthFactor}\n                  onChange={this.handleChange}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <label className=\"prop\" htmlFor=\"zoom\">\n                  Zoom\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"zoom\"\n                  type=\"number\"\n                  defaultValue={this.state.zoom}\n                  onChange={this.handleFloatChange}\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <span className=\"prop prop-large\">Scale Extent</span>\n                <label className=\"sub-prop\" htmlFor=\"scaleExtentMin\">\n                  Min\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"scaleExtentMin\"\n                  type=\"number\"\n                  defaultValue={this.state.scaleExtent.min}\n                  onChange={evt =>\n                    this.setScaleExtent({\n                      min: parseFloat(evt.target.value),\n                      max: this.state.scaleExtent.max,\n                    })\n                  }\n                />\n                <label className=\"sub-prop\" htmlFor=\"scaleExtentMax\">\n                  Max\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"scaleExtentMax\"\n                  type=\"number\"\n                  defaultValue={this.state.scaleExtent.max}\n                  onChange={evt =>\n                    this.setScaleExtent({\n                      min: this.state.scaleExtent.min,\n                      max: parseFloat(evt.target.value),\n                    })\n                  }\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <span className=\"prop prop-large\">Node separation</span>\n                <label className=\"sub-prop\" htmlFor=\"separationSiblings\">\n                  Siblings\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"separationSiblings\"\n                  type=\"number\"\n                  defaultValue={this.state.separation.siblings}\n                  onChange={evt =>\n                    this.setSeparation({\n                      siblings: parseFloat(evt.target.value),\n                      nonSiblings: this.state.separation.nonSiblings,\n                    })\n                  }\n                />\n                <label className=\"sub-prop\" htmlFor=\"separationNonSiblings\">\n                  Non-Siblings\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"separationNonSiblings\"\n                  type=\"number\"\n                  defaultValue={this.state.separation.nonSiblings}\n                  onChange={evt =>\n                    this.setSeparation({\n                      siblings: this.state.separation.siblings,\n                      nonSiblings: parseFloat(evt.target.value),\n                    })\n                  }\n                />\n              </div>\n\n              <div className=\"prop-container\">\n                <span className=\"prop prop-large\">Node size</span>\n                <label className=\"sub-prop\" htmlFor=\"nodeSizeX\">\n                  X\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"nodeSizeX\"\n                  type=\"number\"\n                  defaultValue={this.state.nodeSize.x}\n                  onChange={evt =>\n                    this.setNodeSize({ x: parseFloat(evt.target.value), y: this.state.nodeSize.y })\n                  }\n                />\n                <label className=\"sub-prop\" htmlFor=\"nodeSizeY\">\n                  Y\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"nodeSizeY\"\n                  type=\"number\"\n                  defaultValue={this.state.nodeSize.y}\n                  onChange={evt =>\n                    this.setNodeSize({ x: this.state.nodeSize.x, y: parseFloat(evt.target.value) })\n                  }\n                />\n              </div>\n            </div>\n          </div>``\n\n          <div className=\"column-right\">\n            <div className=\"tree-stats-container\">\n              Total nodes in tree: {this.state.totalNodeCount}\n            </div>\n            <div ref={tc => (this.treeContainer = tc)} className=\"tree-container\">\n              <Tree\n                hasInteractiveNodes\n                data={this.state.data}\n                rootNodeClassName=\"demo-node\"\n                branchNodeClassName=\"demo-node\"\n                leafNodeClassName=\"demo-node\"\n                orientation={this.state.orientation}\n                dimensions={this.state.dimensions}\n                centeringTransitionDuration={this.state.centeringTransitionDuration}\n                translate={{ x: this.state.translateX, y: this.state.translateY }}\n                pathFunc={this.state.pathFunc}\n                collapsible={this.state.collapsible}\n                initialDepth={this.state.initialDepth}\n                zoomable={this.state.zoomable}\n                draggable={this.state.draggable}\n                zoom={this.state.zoom}\n                scaleExtent={this.state.scaleExtent}\n                nodeSize={this.state.nodeSize}\n                separation={this.state.separation}\n                enableLegacyTransitions={this.state.enableLegacyTransitions}\n                transitionDuration={this.state.transitionDuration}\n                depthFactor={this.state.depthFactor}\n                styles={this.state.styles}\n                shouldCollapseNeighborNodes={this.state.shouldCollapseNeighborNodes}\n                onNodeMouseOver={(node, evt) => {\n                  this.setState({\n                    tooltipAction: node && node.data && node.data.tooltip && node.data.tooltip.action ? node.data.tooltip.action : \"\",\n                    tooltipState: node && node.data && node.data.tooltip && node.data.tooltip.state ? node.data.tooltip.state : \"\",\n                    closeToolTip: true\n                  })\n                }}\n                onNodeMouseOut={(...args) => {\n                  if(this.state.closeToolTip) this.setState({tooltipAction: \"\", tooltipState: \"\"})\n                }}\n                onNodeClick={() => {\n                  this.setState({closeToolTip: false})\n                }}\n              />\n            </div>\n            <div className=\"long-state-container\">\n              {this.state.tooltipAction ? \"Action: \" + this.state.tooltipAction : \"\"}\n            </div>\n            <div className=\"long-state-container\">\n              {this.state.tooltipState ? \"State: \" + this.state.tooltipState : \"\"}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\ncreateRoot(document.getElementById('root')).render(<App />);\n"],"sourceRoot":""}